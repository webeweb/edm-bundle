<?php

/*
 * This file is part of the edm-bundle package.
 *
 * (c) 2019 WEBEWEB
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types = 1);

namespace WBW\Bundle\EDMBundle\Tests\Provider;

use WBW\Bundle\EDMBundle\Entity\Document;
use WBW\Bundle\EDMBundle\Model\DocumentInterface;
use WBW\Bundle\EDMBundle\Provider\DocumentIconProvider;
use WBW\Bundle\EDMBundle\Tests\AbstractTestCase;

/**
 * Document icon provider test.
 *
 * @author webeweb <https://github.com/webeweb>
 * @package WBW\Bundle\EDMBundle\Tests\Provider
 */
class DocumentIconProviderTest extends AbstractTestCase {

    /**
     * Test getIcon()
     *
     * @return void
     */
    public function testGetIcon(): void {

        // Set a Document mock.
        $document = new Document();
        $document->setType(DocumentInterface::TYPE_DOCUMENT);

        $obj = new DocumentIconProvider();

        $this->assertEquals("android-package-archive.svg", $obj->getIcon($document->setMimeType("android/package-archive")));
        $this->assertEquals("application-atom+xml.svg", $obj->getIcon($document->setMimeType("application/atom+xml")));
        $this->assertEquals("application-certificate.svg", $obj->getIcon($document->setMimeType("application/certificate")));
        $this->assertEquals("application-dicom.svg", $obj->getIcon($document->setMimeType("application/dicom")));
        $this->assertEquals("application-epub+zip.svg", $obj->getIcon($document->setMimeType("application/epub+zip")));
        $this->assertEquals("application-illustrator.svg", $obj->getIcon($document->setMimeType("application/illustrator")));
        $this->assertEquals("application-javascript.svg", $obj->getIcon($document->setMimeType("application/javascript")));
        $this->assertEquals("application-json.svg", $obj->getIcon($document->setMimeType("application/json")));
        $this->assertEquals("application-mac-binhex40.svg", $obj->getIcon($document->setMimeType("application/mac-binhex40")));
        $this->assertEquals("application-msonenote.svg", $obj->getIcon($document->setMimeType("application/msonenote")));
        $this->assertEquals("application-msoutlook.svg", $obj->getIcon($document->setMimeType("application/msoutlook")));
        $this->assertEquals("application-msword.svg", $obj->getIcon($document->setMimeType("application/msword")));
        $this->assertEquals("application-msword-template.svg", $obj->getIcon($document->setMimeType("application/msword-template")));
        $this->assertEquals("application-octet-stream.svg", $obj->getIcon($document->setMimeType("application/octet-stream")));
        $this->assertEquals("application-ogg.svg", $obj->getIcon($document->setMimeType("application/ogg")));
        $this->assertEquals("application-pdf.svg", $obj->getIcon($document->setMimeType("application/pdf")));
        $this->assertEquals("application-pgp-encrypted.svg", $obj->getIcon($document->setMimeType("application/pgp-encrypted")));
        $this->assertEquals("application-pgp-keys.svg", $obj->getIcon($document->setMimeType("application/pgp-keys")));
        $this->assertEquals("application-pgp-signature.svg", $obj->getIcon($document->setMimeType("application/pgp-signature")));
        $this->assertEquals("application-pgp.svg", $obj->getIcon($document->setMimeType("application/pgp")));
        $this->assertEquals("application-pkcs7-mime.svg", $obj->getIcon($document->setMimeType("application/pkcs7-mime")));
        $this->assertEquals("application-pkcs7-signature.svg", $obj->getIcon($document->setMimeType("application/pkcs7-signature")));
        $this->assertEquals("application-pkix-cerl.svg", $obj->getIcon($document->setMimeType("application/pkix-cerl")));
        $this->assertEquals("application-pkix-cert.svg", $obj->getIcon($document->setMimeType("application/pkix-cert")));
        $this->assertEquals("application-postscript.svg", $obj->getIcon($document->setMimeType("application/postscript")));
        $this->assertEquals("application-relaxng.svg", $obj->getIcon($document->setMimeType("application/relaxng")));
        $this->assertEquals("application-rss+xml.svg", $obj->getIcon($document->setMimeType("application/rss+xml")));
        $this->assertEquals("application-rtf.svg", $obj->getIcon($document->setMimeType("application/rtf")));
        $this->assertEquals("application-sxw.svg", $obj->getIcon($document->setMimeType("application/sxw")));
        $this->assertEquals("application-vnd.android.package-archive.svg", $obj->getIcon($document->setMimeType("application/vnd.android.package-archive")));
        $this->assertEquals("application-vnd-google-earth-kml.svg", $obj->getIcon($document->setMimeType("application/vnd-google-earth-kml")));
        $this->assertEquals("application-vnd.iccprofile.svg", $obj->getIcon($document->setMimeType("application/vnd.iccprofile")));
        $this->assertEquals("application-vnd.ms-access.svg", $obj->getIcon($document->setMimeType("application/vnd.ms-access")));
        $this->assertEquals("application-vnd.ms-excel.addin.macroenabled.12.svg", $obj->getIcon($document->setMimeType("application/vnd.ms-excel.addin.macroenabled.12")));
        $this->assertEquals("application-vnd.ms-excel.sheet.binary.macroenabled.12.svg", $obj->getIcon($document->setMimeType("application/vnd.ms-excel.sheet.binary.macroenabled.12")));
        $this->assertEquals("application-vnd.ms-excel.sheet.macroenabled.12.svg", $obj->getIcon($document->setMimeType("application/vnd.ms-excel.sheet.macroenabled.12")));
        $this->assertEquals("application-vnd.ms-excel.svg", $obj->getIcon($document->setMimeType("application/vnd.ms-excel")));
        $this->assertEquals("application-vnd.ms-excel.template.macroenabled.12.svg", $obj->getIcon($document->setMimeType("application/vnd.ms-excel.template.macroenabled.12")));
        $this->assertEquals("application-vnd.ms-infopath.svg", $obj->getIcon($document->setMimeType("application/vnd.ms-infopath")));
        $this->assertEquals("application-vnd.ms-powerpoint.addin.macroenabled.12.svg", $obj->getIcon($document->setMimeType("application/vnd.ms-powerpoint.addin.macroenabled.12")));
        $this->assertEquals("application-vnd.ms-powerpoint.presentation.macroenabled.12.svg", $obj->getIcon($document->setMimeType("application/vnd.ms-powerpoint.presentation.macroenabled.12")));
        $this->assertEquals("application-vnd.ms-powerpoint.slide.macroenabled.12.svg", $obj->getIcon($document->setMimeType("application/vnd.ms-powerpoint.slide.macroenabled.12")));
        $this->assertEquals("application-vnd.ms-powerpoint.slideshow.macroenabled.12.svg", $obj->getIcon($document->setMimeType("application/vnd.ms-powerpoint.slideshow.macroenabled.12")));
        $this->assertEquals("application-vnd.ms-powerpoint.svg", $obj->getIcon($document->setMimeType("application/vnd.ms-powerpoint")));
        $this->assertEquals("application-vnd.ms-powerpoint.template.macroenabled.12.svg", $obj->getIcon($document->setMimeType("application/vnd.ms-powerpoint.template.macroenabled.12")));
        $this->assertEquals("application-vnd.ms-publisher.svg", $obj->getIcon($document->setMimeType("application/vnd.ms-publisher")));
        $this->assertEquals("application-vnd.ms-word.document.macroenabled.12.svg", $obj->getIcon($document->setMimeType("application/vnd.ms-word.document.macroenabled.12")));
        $this->assertEquals("application-vnd.ms-word.svg", $obj->getIcon($document->setMimeType("application/vnd.ms-word")));
        $this->assertEquals("application-vnd.ms-word.template.macroenabled.12.svg", $obj->getIcon($document->setMimeType("application/vnd.ms-word.template.macroenabled.12")));
        $this->assertEquals("application-vnd.nintendo.snes.rom.svg", $obj->getIcon($document->setMimeType("application/vnd.nintendo.snes.rom")));
        $this->assertEquals("application-vnd.oasis.opendocument.chart.svg", $obj->getIcon($document->setMimeType("application/vnd.oasis.opendocument.chart")));
        $this->assertEquals("application-vnd.oasis.opendocument.database.svg", $obj->getIcon($document->setMimeType("application/vnd.oasis.opendocument.database")));
        $this->assertEquals("application-vnd.oasis.opendocument.drawing.svg", $obj->getIcon($document->setMimeType("application/vnd.oasis.opendocument.drawing")));
        $this->assertEquals("application-vnd.oasis.opendocument.drawing.template.svg", $obj->getIcon($document->setMimeType("application/vnd.oasis.opendocument.drawing.template")));
        $this->assertEquals("application-vnd.oasis.opendocument.draw.template.svg", $obj->getIcon($document->setMimeType("application/vnd.oasis.opendocument.draw.template")));
        $this->assertEquals("application-vnd.oasis.opendocument.formula.svg", $obj->getIcon($document->setMimeType("application/vnd.oasis.opendocument.formula")));
        $this->assertEquals("application-vnd.oasis.opendocument.formula-template.svg", $obj->getIcon($document->setMimeType("application/vnd.oasis.opendocument.formula-template")));
        $this->assertEquals("application-vnd.oasis.opendocument.graphics.svg", $obj->getIcon($document->setMimeType("application/vnd.oasis.opendocument.graphics")));
        $this->assertEquals("application-vnd.oasis.opendocument.image.svg", $obj->getIcon($document->setMimeType("application/vnd.oasis.opendocument.image")));
        $this->assertEquals("application-vnd.oasis.opendocument.presentation.svg", $obj->getIcon($document->setMimeType("application/vnd.oasis.opendocument.presentation")));
        $this->assertEquals("application-vnd.oasis.opendocument.presentation-template.svg", $obj->getIcon($document->setMimeType("application/vnd.oasis.opendocument.presentation-template")));
        $this->assertEquals("application-vnd.oasis.opendocument.spreadsheet.svg", $obj->getIcon($document->setMimeType("application/vnd.oasis.opendocument.spreadsheet")));
        $this->assertEquals("application-vnd.oasis.opendocument.spreadsheet-template.svg", $obj->getIcon($document->setMimeType("application/vnd.oasis.opendocument.spreadsheet-template")));
        $this->assertEquals("application-vnd.oasis.opendocument.text-master.svg", $obj->getIcon($document->setMimeType("application/vnd.oasis.opendocument.text-master")));
        $this->assertEquals("application-vnd.oasis.opendocument.text.svg", $obj->getIcon($document->setMimeType("application/vnd.oasis.opendocument.text")));
        $this->assertEquals("application-vnd.oasis.opendocument.text-template.svg", $obj->getIcon($document->setMimeType("application/vnd.oasis.opendocument.text-template")));
        $this->assertEquals("application-vnd.oasis.opendocument.web-template.svg", $obj->getIcon($document->setMimeType("application/vnd.oasis.opendocument.web-template")));
        $this->assertEquals("application-vnd.openxmlformats-officedocument.spreadsheetml.sheet.svg", $obj->getIcon($document->setMimeType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")));
        $this->assertEquals("application-vnd.openxmlformats-officedocument.wordprocessingml.document.svg", $obj->getIcon($document->setMimeType("application/vnd.openxmlformats-officedocument.wordprocessingml.document")));
        $this->assertEquals("application-vnd.rar.svg", $obj->getIcon($document->setMimeType("application/vnd.rar")));
        $this->assertEquals("application-vnd.rn-realmedia.svg", $obj->getIcon($document->setMimeType("application/vnd.rn-realmedia")));
        $this->assertEquals("application-vnd.scribus.svg", $obj->getIcon($document->setMimeType("application/vnd.scribus")));
        $this->assertEquals("application-vnd.stardivision.calc.svg", $obj->getIcon($document->setMimeType("application/vnd.stardivision.calc")));
        $this->assertEquals("application-vnd.stardivision.draw.svg", $obj->getIcon($document->setMimeType("application/vnd.stardivision.draw")));
        $this->assertEquals("application-vnd.stardivision.mail.svg", $obj->getIcon($document->setMimeType("application/vnd.stardivision.mail")));
        $this->assertEquals("application-vnd.stardivision.math.svg", $obj->getIcon($document->setMimeType("application/vnd.stardivision.math")));
        $this->assertEquals("application-vnd.sun.xml.calc.svg", $obj->getIcon($document->setMimeType("application/vnd.sun.xml.calc")));
        $this->assertEquals("application-vnd.sun.xml.calc.template.svg", $obj->getIcon($document->setMimeType("application/vnd.sun.xml.calc.template")));
        $this->assertEquals("application-vnd.sun.xml.draw.svg", $obj->getIcon($document->setMimeType("application/vnd.sun.xml.draw")));
        $this->assertEquals("application-vnd.sun.xml.draw.template.svg", $obj->getIcon($document->setMimeType("application/vnd.sun.xml.draw.template")));
        $this->assertEquals("application-vnd.sun.xml.impress.svg", $obj->getIcon($document->setMimeType("application/vnd.sun.xml.impress")));
        $this->assertEquals("application-vnd.sun.xml.impress.template.svg", $obj->getIcon($document->setMimeType("application/vnd.sun.xml.impress.template")));
        $this->assertEquals("application-vnd.sun.xml.math.svg", $obj->getIcon($document->setMimeType("application/vnd.sun.xml.math")));
        $this->assertEquals("application-vnd.sun.xml.writer.global.svg", $obj->getIcon($document->setMimeType("application/vnd.sun.xml.writer.global")));
        $this->assertEquals("application-vnd.sun.xml.writer.svg", $obj->getIcon($document->setMimeType("application/vnd.sun.xml.writer")));
        $this->assertEquals("application-vnd.sun.xml.writer.template.svg", $obj->getIcon($document->setMimeType("application/vnd.sun.xml.writer.template")));
        $this->assertEquals("application-vnd.visio.svg", $obj->getIcon($document->setMimeType("application/vnd.visio")));
        $this->assertEquals("application-vnd.wordperfect.svg", $obj->getIcon($document->setMimeType("application/vnd.wordperfect")));
        $this->assertEquals("application-wps-office.doc.svg", $obj->getIcon($document->setMimeType("application/wps-office.doc")));
        $this->assertEquals("application-wps-office.docx.svg", $obj->getIcon($document->setMimeType("application/wps-office.docx")));
        $this->assertEquals("application-wps-office.dot.svg", $obj->getIcon($document->setMimeType("application/wps-office.dot")));
        $this->assertEquals("application-wps-office.dotx.svg", $obj->getIcon($document->setMimeType("application/wps-office.dotx")));
        $this->assertEquals("application-wps-office.pot.svg", $obj->getIcon($document->setMimeType("application/wps-office.pot")));
        $this->assertEquals("application-wps-office.potx.svg", $obj->getIcon($document->setMimeType("application/wps-office.potx")));
        $this->assertEquals("application-wps-office.ppt.svg", $obj->getIcon($document->setMimeType("application/wps-office.ppt")));
        $this->assertEquals("application-wps-office.pptx.svg", $obj->getIcon($document->setMimeType("application/wps-office.pptx")));
        $this->assertEquals("application-wps-office.xls.svg", $obj->getIcon($document->setMimeType("application/wps-office.xls")));
        $this->assertEquals("application-wps-office.xlsx.svg", $obj->getIcon($document->setMimeType("application/wps-office.xlsx")));
        $this->assertEquals("application-wps-office.xlt.svg", $obj->getIcon($document->setMimeType("application/wps-office.xlt")));
        $this->assertEquals("application-wps-office.xltx.svg", $obj->getIcon($document->setMimeType("application/wps-office.xltx")));
        $this->assertEquals("application-x-7z-compressed.svg", $obj->getIcon($document->setMimeType("application/x-7z-compressed")));
        $this->assertEquals("application-x-abiword.svg", $obj->getIcon($document->setMimeType("application/x-abiword")));
        $this->assertEquals("application-x-ace.svg", $obj->getIcon($document->setMimeType("application/x-ace")));
        $this->assertEquals("application-x-apple-diskimage.svg", $obj->getIcon($document->setMimeType("application/x-apple-diskimage")));
        $this->assertEquals("application-x-applix-spreadsheet.svg", $obj->getIcon($document->setMimeType("application/x-applix-spreadsheet")));
        $this->assertEquals("application-x-applix-word.svg", $obj->getIcon($document->setMimeType("application/x-applix-word")));
        $this->assertEquals("application-x-archive.svg", $obj->getIcon($document->setMimeType("application/x-archive")));
        $this->assertEquals("application-x-arc.svg", $obj->getIcon($document->setMimeType("application/x-arc")));
        $this->assertEquals("application-x-arj.svg", $obj->getIcon($document->setMimeType("application/x-arj")));
        $this->assertEquals("application-x-ar.svg", $obj->getIcon($document->setMimeType("application/x-ar")));
        $this->assertEquals("application-x-awk.svg", $obj->getIcon($document->setMimeType("application/x-awk")));
        $this->assertEquals("application-x-bittorrent.svg", $obj->getIcon($document->setMimeType("application/x-bittorrent")));
        $this->assertEquals("application-x-blender.svg", $obj->getIcon($document->setMimeType("application/x-blender")));
        $this->assertEquals("application-x-bzdvi.svg", $obj->getIcon($document->setMimeType("application/x-bzdvi")));
        $this->assertEquals("application-x-bzip-compressed-tar.svg", $obj->getIcon($document->setMimeType("application/x-bzip-compressed-tar")));
        $this->assertEquals("application-x-bzip.svg", $obj->getIcon($document->setMimeType("application/x-bzip")));
        $this->assertEquals("application-x-bzip.svg", $obj->getIcon($document->setMimeType("application/x-bzip")));
        $this->assertEquals("application-x-cda.svg", $obj->getIcon($document->setMimeType("application/x-cda")));
        $this->assertEquals("application-x-cd-image.svg", $obj->getIcon($document->setMimeType("application/x-cd-image")));
        $this->assertEquals("application-x-chm.svg", $obj->getIcon($document->setMimeType("application/x-chm")));
        $this->assertEquals("application-x-compressed-tar.svg", $obj->getIcon($document->setMimeType("application/x-compressed-tar")));
        $this->assertEquals("application-x-compress.svg", $obj->getIcon($document->setMimeType("application/x-compress")));
        $this->assertEquals("application-x-cpio.svg", $obj->getIcon($document->setMimeType("application/x-cpio")));
        $this->assertEquals("application-x-cue.svg", $obj->getIcon($document->setMimeType("application/x-cue")));
        $this->assertEquals("application-x-deb.svg", $obj->getIcon($document->setMimeType("application/x-deb")));
        $this->assertEquals("application-x-designer.svg", $obj->getIcon($document->setMimeType("application/x-designer")));
        $this->assertEquals("application-x-desktop.svg", $obj->getIcon($document->setMimeType("application/x-desktop")));
        $this->assertEquals("application-x-egon.svg", $obj->getIcon($document->setMimeType("application/x-egon")));
        $this->assertEquals("application-x-executable-script.svg", $obj->getIcon($document->setMimeType("application/x-executable-script")));
        $this->assertEquals("application-x-executable.svg", $obj->getIcon($document->setMimeType("application/x-executable")));
        $this->assertEquals("application-x-flash-video.svg", $obj->getIcon($document->setMimeType("application/x-flash-video")));
        $this->assertEquals("application-x-font-afm.svg", $obj->getIcon($document->setMimeType("application/x-font-afm")));
        $this->assertEquals("application-x-font-bdf.svg", $obj->getIcon($document->setMimeType("application/x-font-bdf")));
        $this->assertEquals("application-x-font-otf.svg", $obj->getIcon($document->setMimeType("application/x-font-otf")));
        $this->assertEquals("application-x-font-pcf.svg", $obj->getIcon($document->setMimeType("application/x-font-pcf")));
        $this->assertEquals("application-x-font-snf.svg", $obj->getIcon($document->setMimeType("application/x-font-snf")));
        $this->assertEquals("application-x-font-ttf.svg", $obj->getIcon($document->setMimeType("application/x-font-ttf")));
        $this->assertEquals("application-x-font-type1.svg", $obj->getIcon($document->setMimeType("application/x-font-type1")));
        $this->assertEquals("application-x-gameboy-rom.svg", $obj->getIcon($document->setMimeType("application/x-gameboy-rom")));
        $this->assertEquals("application-x-gamecube-rom.svg", $obj->getIcon($document->setMimeType("application/x-gamecube-rom")));
        $this->assertEquals("application-x-gba-rom.svg", $obj->getIcon($document->setMimeType("application/x-gba-rom")));
        $this->assertEquals("application-x-gettext-translation.svg", $obj->getIcon($document->setMimeType("application/x-gettext-translation")));
        $this->assertEquals("application-x-gnumeric.svg", $obj->getIcon($document->setMimeType("application/x-gnumeric")));
        $this->assertEquals("application-x-gzdvi.svg", $obj->getIcon($document->setMimeType("application/x-gzdvi")));
        $this->assertEquals("application-x-gzip.svg", $obj->getIcon($document->setMimeType("application/x-gzip")));
        $this->assertEquals("application-x-gzpostscript.svg", $obj->getIcon($document->setMimeType("application/x-gzpostscript")));
        $this->assertEquals("application-xhtml+xml.svg", $obj->getIcon($document->setMimeType("application/xhtml+xml")));
        $this->assertEquals("application-x-iso.svg", $obj->getIcon($document->setMimeType("application/x-iso")));
        $this->assertEquals("application-x-it87.svg", $obj->getIcon($document->setMimeType("application/x-it87")));
        $this->assertEquals("application-x-jar.svg", $obj->getIcon($document->setMimeType("application/x-jar")));
        $this->assertEquals("application-x-java-applet.svg", $obj->getIcon($document->setMimeType("application/x-java-applet")));
        $this->assertEquals("application-x-java-archive.svg", $obj->getIcon($document->setMimeType("application/x-java-archive")));
        $this->assertEquals("application-x-javascript.svg", $obj->getIcon($document->setMimeType("application/x-javascript")));
        $this->assertEquals("application-x-java.svg", $obj->getIcon($document->setMimeType("application/x-java")));
        $this->assertEquals("application-x-k3b.svg", $obj->getIcon($document->setMimeType("application/x-k3b")));
        $this->assertEquals("application-x-kcsrc.svg", $obj->getIcon($document->setMimeType("application/x-kcsrc")));
        $this->assertEquals("application-x-kdenlivetitle.svg", $obj->getIcon($document->setMimeType("application/x-kdenlivetitle")));
        $this->assertEquals("application-x-kexi-connectiondata.svg", $obj->getIcon($document->setMimeType("application/x-kexi-connectiondata")));
        $this->assertEquals("application-x-kexiproject-shortcut.svg", $obj->getIcon($document->setMimeType("application/x-kexiproject-shortcut")));
        $this->assertEquals("application-x-kexiproject-sqlite2.svg", $obj->getIcon($document->setMimeType("application/x-kexiproject-sqlite2")));
        $this->assertEquals("application-x-kexiproject-sqlite3.svg", $obj->getIcon($document->setMimeType("application/x-kexiproject-sqlite3")));
        $this->assertEquals("application-x-kexiproject-sqlite.svg", $obj->getIcon($document->setMimeType("application/x-kexiproject-sqlite")));
        $this->assertEquals("application-x-kformula.svg", $obj->getIcon($document->setMimeType("application/x-kformula")));
        $this->assertEquals("application-x-kgetlist.svg", $obj->getIcon($document->setMimeType("application/x-kgetlist")));
        $this->assertEquals("application-x-kontour.svg", $obj->getIcon($document->setMimeType("application/x-kontour")));
        $this->assertEquals("application-x-kplato.svg", $obj->getIcon($document->setMimeType("application/x-kplato")));
        $this->assertEquals("application-x-krita.svg", $obj->getIcon($document->setMimeType("application/x-krita")));
        $this->assertEquals("application-x-kvtml.svg", $obj->getIcon($document->setMimeType("application/x-kvtml")));
        $this->assertEquals("application-x-kword.svg", $obj->getIcon($document->setMimeType("application/x-kword")));
        $this->assertEquals("application-x-lha.svg", $obj->getIcon($document->setMimeType("application/x-lha")));
        $this->assertEquals("application-x-lyx.svg", $obj->getIcon($document->setMimeType("application/x-lyx")));
        $this->assertEquals("application-x-lzma-compressed-tar.svg", $obj->getIcon($document->setMimeType("application/x-lzma-compressed-tar")));
        $this->assertEquals("application-x-lzop.svg", $obj->getIcon($document->setMimeType("application/x-lzop")));
        $this->assertEquals("application-x-m4.svg", $obj->getIcon($document->setMimeType("application/x-m4")));
        $this->assertEquals("application-x-macbinary.svg", $obj->getIcon($document->setMimeType("application/x-macbinary")));
        $this->assertEquals("application-x-marble.svg", $obj->getIcon($document->setMimeType("application/x-marble")));
        $this->assertEquals("application-x-mimearchive.svg", $obj->getIcon($document->setMimeType("application/x-mimearchive")));
        $this->assertEquals("application-xmind.svg", $obj->getIcon($document->setMimeType("application/xmind")));
        $this->assertEquals("application-xml.svg", $obj->getIcon($document->setMimeType("application/xml")));
        $this->assertEquals("application-xml.svg", $obj->getIcon($document->setMimeType("application/xml")));
        $this->assertEquals("application-x-mplayer2.svg", $obj->getIcon($document->setMimeType("application/x-mplayer2")));
        $this->assertEquals("application-x-ms-dos-executable.svg", $obj->getIcon($document->setMimeType("application/x-ms-dos-executable")));
        $this->assertEquals("application-x-ms-shortcut.svg", $obj->getIcon($document->setMimeType("application/x-ms-shortcut")));
        $this->assertEquals("application-x-mswinurl.svg", $obj->getIcon($document->setMimeType("application/x-mswinurl")));
        $this->assertEquals("application-x-mswrite.svg", $obj->getIcon($document->setMimeType("application/x-mswrite")));
        $this->assertEquals("application-x-n64-rom.svg", $obj->getIcon($document->setMimeType("application/x-n64-rom")));
        $this->assertEquals("application-x-nes-rom.svg", $obj->getIcon($document->setMimeType("application/x-nes-rom")));
        $this->assertEquals("application-x-nintendo-ds-rom.svg", $obj->getIcon($document->setMimeType("application/x-nintendo-ds-rom")));
        $this->assertEquals("application-x-nzb.svg", $obj->getIcon($document->setMimeType("application/x-nzb")));
        $this->assertEquals("application-x-object.svg", $obj->getIcon($document->setMimeType("application/x-object")));
        $this->assertEquals("application-x-pak.svg", $obj->getIcon($document->setMimeType("application/x-pak")));
        $this->assertEquals("application-x-partial-download.svg", $obj->getIcon($document->setMimeType("application/x-partial-download")));
        $this->assertEquals("application-x-pem-key.svg", $obj->getIcon($document->setMimeType("application/x-pem-key")));
        $this->assertEquals("application-x-perl.svg", $obj->getIcon($document->setMimeType("application/x-perl")));
        $this->assertEquals("application-x-php.svg", $obj->getIcon($document->setMimeType("application/x-php")));
        $this->assertEquals("application-x-pkcs12.svg", $obj->getIcon($document->setMimeType("application/x-pkcs12")));
        $this->assertEquals("application-x-pkcs7-certificates.svg", $obj->getIcon($document->setMimeType("application/x-pkcs7-certificates")));
        $this->assertEquals("application-x-plasma.svg", $obj->getIcon($document->setMimeType("application/x-plasma")));
        $this->assertEquals("application-x-python-bytecode.svg", $obj->getIcon($document->setMimeType("application/x-python-bytecode")));
        $this->assertEquals("application-x-qet-element.svg", $obj->getIcon($document->setMimeType("application/x-qet-element")));
        $this->assertEquals("application-x-qet-project.svg", $obj->getIcon($document->setMimeType("application/x-qet-project")));
        $this->assertEquals("application-x-quattropro.svg", $obj->getIcon($document->setMimeType("application/x-quattropro")));
        $this->assertEquals("application-x-rar.svg", $obj->getIcon($document->setMimeType("application/x-rar")));
        $this->assertEquals("application-x-raw-disk-image.svg", $obj->getIcon($document->setMimeType("application/x-raw-disk-image")));
        $this->assertEquals("application-x-rdata.svg", $obj->getIcon($document->setMimeType("application/x-rdata")));
        $this->assertEquals("application-x-rpm.svg", $obj->getIcon($document->setMimeType("application/x-rpm")));
        $this->assertEquals("application-x-ruby.svg", $obj->getIcon($document->setMimeType("application/x-ruby")));
        $this->assertEquals("application-xsd.svg", $obj->getIcon($document->setMimeType("application/xsd")));
        $this->assertEquals("application-x-sharedlib.svg", $obj->getIcon($document->setMimeType("application/x-sharedlib")));
        $this->assertEquals("application-x-shellscript.svg", $obj->getIcon($document->setMimeType("application/x-shellscript")));
        $this->assertEquals("application-x-shockwave-flash.svg", $obj->getIcon($document->setMimeType("application/x-shockwave-flash")));
        $this->assertEquals("application-x-shockwave-flash.svg", $obj->getIcon($document->setMimeType("application/x-shockwave-flash")));
        $this->assertEquals("application-x-siag.svg", $obj->getIcon($document->setMimeType("application/x-siag")));
        $this->assertEquals("application-x-sif.svg", $obj->getIcon($document->setMimeType("application/x-sif")));
        $this->assertEquals("application-x-skgc.svg", $obj->getIcon($document->setMimeType("application/x-skgc")));
        $this->assertEquals("application-x-skg.svg", $obj->getIcon($document->setMimeType("application/x-skg")));
        $this->assertEquals("application-xslt+xml.svg", $obj->getIcon($document->setMimeType("application/xslt+xml")));
        $this->assertEquals("application-x-smb-server.svg", $obj->getIcon($document->setMimeType("application/x-smb-server")));
        $this->assertEquals("application-x-smb-workgroup.svg", $obj->getIcon($document->setMimeType("application/x-smb-workgroup")));
        $this->assertEquals("application-x-source-rpm.svg", $obj->getIcon($document->setMimeType("application/x-source-rpm")));
        $this->assertEquals("application-x-sqlite2.svg", $obj->getIcon($document->setMimeType("application/x-sqlite2")));
        $this->assertEquals("application-x-sqlite3.svg", $obj->getIcon($document->setMimeType("application/x-sqlite3")));
        $this->assertEquals("application-x-srtrip.svg", $obj->getIcon($document->setMimeType("application/x-srtrip")));
        $this->assertEquals("application-x-srt.svg", $obj->getIcon($document->setMimeType("application/x-srt")));
        $this->assertEquals("application-x-subrip.svg", $obj->getIcon($document->setMimeType("application/x-subrip")));
        $this->assertEquals("application-x-tar.svg", $obj->getIcon($document->setMimeType("application/x-tar")));
        $this->assertEquals("application-x-tarz.svg", $obj->getIcon($document->setMimeType("application/x-tarz")));
        $this->assertEquals("application-x-tgif.svg", $obj->getIcon($document->setMimeType("application/x-tgif")));
        $this->assertEquals("application-x-theme.svg", $obj->getIcon($document->setMimeType("application/x-theme")));
        $this->assertEquals("application-x-trash.svg", $obj->getIcon($document->setMimeType("application/x-trash")));
        $this->assertEquals("application-x-troff-man.svg", $obj->getIcon($document->setMimeType("application/x-troff-man")));
        $this->assertEquals("application-x-tzo.svg", $obj->getIcon($document->setMimeType("application/x-tzo")));
        $this->assertEquals("application-x-wmf.svg", $obj->getIcon($document->setMimeType("application/x-wmf")));
        $this->assertEquals("application-x-x509-ca-cert.svg", $obj->getIcon($document->setMimeType("application/x-x509-ca-cert")));
        $this->assertEquals("application-x-x509-user-cert.svg", $obj->getIcon($document->setMimeType("application/x-x509-user-cert")));
        $this->assertEquals("application-x-x509-user-cert.svg", $obj->getIcon($document->setMimeType("application/x-x509-user-cert")));
        $this->assertEquals("application-x-xliff.svg", $obj->getIcon($document->setMimeType("application/x-xliff")));
        $this->assertEquals("application-x-xpinstall.svg", $obj->getIcon($document->setMimeType("application/x-xpinstall")));
        $this->assertEquals("application-x-xz-compressed-tar.svg", $obj->getIcon($document->setMimeType("application/x-xz-compressed-tar")));
        $this->assertEquals("application-x-xz-pkg.svg", $obj->getIcon($document->setMimeType("application/x-xz-pkg")));
        $this->assertEquals("application-x-zerosize.svg", $obj->getIcon($document->setMimeType("application/x-zerosize")));
        $this->assertEquals("application-x-zoo.svg", $obj->getIcon($document->setMimeType("application/x-zoo")));
        $this->assertEquals("application-zip.svg", $obj->getIcon($document->setMimeType("application/zip")));
        $this->assertEquals("audio-ac3.svg", $obj->getIcon($document->setMimeType("audio/ac3")));
        $this->assertEquals("audiobook.svg", $obj->getIcon($document->setMimeType("audiobook")));
        $this->assertEquals("audio-flac.svg", $obj->getIcon($document->setMimeType("audio/flac")));
        $this->assertEquals("audio-midi.svg", $obj->getIcon($document->setMimeType("audio/midi")));
        $this->assertEquals("audio-mp2.svg", $obj->getIcon($document->setMimeType("audio/mp2")));
        $this->assertEquals("audio-mp3.svg", $obj->getIcon($document->setMimeType("audio/mp3")));
        $this->assertEquals("audio-mp4.svg", $obj->getIcon($document->setMimeType("audio/mp4")));
        $this->assertEquals("audio-prs.sid.svg", $obj->getIcon($document->setMimeType("audio/prs.sid")));
        $this->assertEquals("audio-vnd.rn-realvideo.svg", $obj->getIcon($document->setMimeType("audio/vnd.rn-realvideo")));
        $this->assertEquals("audio-vn.rn-realmedia.svg", $obj->getIcon($document->setMimeType("audio/vn.rn-realmedia")));
        $this->assertEquals("audio-x-adpcm.svg", $obj->getIcon($document->setMimeType("audio/x-adpcm")));
        $this->assertEquals("audio-x-adpcm.svg", $obj->getIcon($document->setMimeType("audio/x-adpcm")));
        $this->assertEquals("audio-x-aiff.svg", $obj->getIcon($document->setMimeType("audio/x-aiff")));
        $this->assertEquals("audio-x-flac+ogg.svg", $obj->getIcon($document->setMimeType("audio/x-flac+ogg")));
        $this->assertEquals("audio-x-flac.svg", $obj->getIcon($document->setMimeType("audio/x-flac")));
        $this->assertEquals("audio-x-generic.svg", $obj->getIcon($document->setMimeType("audio/x-generic")));
        $this->assertEquals("audio-x-monkey.svg", $obj->getIcon($document->setMimeType("audio/x-monkey")));
        $this->assertEquals("audio-x-mp2.svg", $obj->getIcon($document->setMimeType("audio/x-mp2")));
        $this->assertEquals("audio-x-mpeg.svg", $obj->getIcon($document->setMimeType("audio/x-mpeg")));
        $this->assertEquals("audio-x-mpeg.svg", $obj->getIcon($document->setMimeType("audio/x-mpeg")));
        $this->assertEquals("audio-x-speex+ogg.svg", $obj->getIcon($document->setMimeType("audio/x-speex+ogg")));
        $this->assertEquals("audio-x-wav.svg", $obj->getIcon($document->setMimeType("audio/x-wav")));
        $this->assertEquals("encrypted.svg", $obj->getIcon($document->setMimeType("encrypted")));
        $this->assertEquals("folder.svg", $obj->getIcon($document->setMimeType("folder")));
        $this->assertEquals("fonts-package.svg", $obj->getIcon($document->setMimeType("fonts/package")));
        $this->assertEquals("font-ttf.svg", $obj->getIcon($document->setMimeType("font/ttf")));
        $this->assertEquals("image-bmp.svg", $obj->getIcon($document->setMimeType("image/bmp")));
        $this->assertEquals("image-gif.svg", $obj->getIcon($document->setMimeType("image/gif")));
        $this->assertEquals("image-gif.svg", $obj->getIcon($document->setMimeType("image/gif")));
        $this->assertEquals("image-ico.svg", $obj->getIcon($document->setMimeType("image/ico")));
        $this->assertEquals("image-jpeg2000.svg", $obj->getIcon($document->setMimeType("image/jpeg2000")));
        $this->assertEquals("image-jpeg.svg", $obj->getIcon($document->setMimeType("image/jpeg")));
        $this->assertEquals("image-png.svg", $obj->getIcon($document->setMimeType("image/png")));
        $this->assertEquals("image-svg+xml-compressed.svg", $obj->getIcon($document->setMimeType("image/svg+xml-compressed")));
        $this->assertEquals("image-svg+xml.svg", $obj->getIcon($document->setMimeType("image/svg+xml")));
        $this->assertEquals("image-tiff.svg", $obj->getIcon($document->setMimeType("image/tiff")));
        $this->assertEquals("image-vnd.dgn.svg", $obj->getIcon($document->setMimeType("image/vnd.dgn")));
        $this->assertEquals("image-vnd.djvu.svg", $obj->getIcon($document->setMimeType("image/vnd.djvu")));
        $this->assertEquals("image-vnd.dwg.svg", $obj->getIcon($document->setMimeType("image/vnd.dwg")));
        $this->assertEquals("image-vnd.microsoft.icon.svg", $obj->getIcon($document->setMimeType("image/vnd.microsoft.icon")));
        $this->assertEquals("image-x-adobe-dng.svg", $obj->getIcon($document->setMimeType("image/x-adobe-dng")));
        $this->assertEquals("image-x-compressed-xcf.svg", $obj->getIcon($document->setMimeType("image/x-compressed-xcf")));
        $this->assertEquals("image-x-emf.svg", $obj->getIcon($document->setMimeType("image/x-emf")));
        $this->assertEquals("image-x-eps.svg", $obj->getIcon($document->setMimeType("image/x-eps")));
        $this->assertEquals("image-x-generic.svg", $obj->getIcon($document->setMimeType("image/x-generic")));
        $this->assertEquals("image-x-icon.svg", $obj->getIcon($document->setMimeType("image/x-icon")));
        $this->assertEquals("image-x-icon.svg", $obj->getIcon($document->setMimeType("image/x-icon")));
        $this->assertEquals("image-x-ico.svg", $obj->getIcon($document->setMimeType("image/x-ico")));
        $this->assertEquals("image-x-krita.svg", $obj->getIcon($document->setMimeType("image/x-krita")));
        $this->assertEquals("image-x-portable-bitmap.svg", $obj->getIcon($document->setMimeType("image/x-portable-bitmap")));
        $this->assertEquals("image-x-psdimage-x-psd.svg", $obj->getIcon($document->setMimeType("image/x-psdimage-x-psd")));
        $this->assertEquals("image-x-psd.svg", $obj->getIcon($document->setMimeType("image/x-psd")));
        $this->assertEquals("image-x-svg+xml.svg", $obj->getIcon($document->setMimeType("image/x-svg+xml")));
        $this->assertEquals("image-x-tga.svg", $obj->getIcon($document->setMimeType("image/x-tga")));
        $this->assertEquals("image-x-vnd.trolltech.qpicture.svg", $obj->getIcon($document->setMimeType("image/x-vnd.trolltech.qpicture")));
        $this->assertEquals("image-x-win-bitmap.svg", $obj->getIcon($document->setMimeType("image/x-win-bitmap")));
        $this->assertEquals("image-x-win-bmp.svg", $obj->getIcon($document->setMimeType("image/x-win-bmp")));
        $this->assertEquals("image-x-wmf.svg", $obj->getIcon($document->setMimeType("image/x-wmf")));
        $this->assertEquals("image-x-xcf.svg", $obj->getIcon($document->setMimeType("image/x-xcf")));
        $this->assertEquals("image-x-xfig.svg", $obj->getIcon($document->setMimeType("image/x-xfig")));
        $this->assertEquals("inode-directory.svg", $obj->getIcon($document->setMimeType("inode/directory")));
        $this->assertEquals("libreoffice-database.svg", $obj->getIcon($document->setMimeType("libreoffice/database")));
        $this->assertEquals("libreoffice-drawing.svg", $obj->getIcon($document->setMimeType("libreoffice/drawing")));
        $this->assertEquals("libreoffice-drawing-template.svg", $obj->getIcon($document->setMimeType("libreoffice/drawing-template")));
        $this->assertEquals("libreoffice-extension.svg", $obj->getIcon($document->setMimeType("libreoffice/extension")));
        $this->assertEquals("libreoffice-formula.svg", $obj->getIcon($document->setMimeType("libreoffice/formula")));
        $this->assertEquals("libreoffice-master-document.svg", $obj->getIcon($document->setMimeType("libreoffice/master-document")));
        $this->assertEquals("libreoffice-oasis-database.svg", $obj->getIcon($document->setMimeType("libreoffice/oasis-database")));
        $this->assertEquals("libreoffice-oasis-drawing.svg", $obj->getIcon($document->setMimeType("libreoffice/oasis-drawing")));
        $this->assertEquals("libreoffice-oasis-drawing-template.svg", $obj->getIcon($document->setMimeType("libreoffice/oasis-drawing-template")));
        $this->assertEquals("libreoffice-oasis-formula.svg", $obj->getIcon($document->setMimeType("libreoffice/oasis-formula")));
        $this->assertEquals("libreoffice-oasis-master-document.svg", $obj->getIcon($document->setMimeType("libreoffice/oasis-master-document")));
        $this->assertEquals("libreoffice-oasis-presentation.svg", $obj->getIcon($document->setMimeType("libreoffice/oasis-presentation")));
        $this->assertEquals("libreoffice-oasis-presentation-template.svg", $obj->getIcon($document->setMimeType("libreoffice/oasis-presentation-template")));
        $this->assertEquals("libreoffice-oasis-spreadsheet.svg", $obj->getIcon($document->setMimeType("libreoffice/oasis-spreadsheet")));
        $this->assertEquals("libreoffice-oasis-spreadsheet-template.svg", $obj->getIcon($document->setMimeType("libreoffice/oasis-spreadsheet-template")));
        $this->assertEquals("libreoffice-oasis-text.svg", $obj->getIcon($document->setMimeType("libreoffice/oasis-text")));
        $this->assertEquals("libreoffice-oasis-text-template.svg", $obj->getIcon($document->setMimeType("libreoffice/oasis-text-template")));
        $this->assertEquals("libreoffice-oasis-web-template.svg", $obj->getIcon($document->setMimeType("libreoffice/oasis-web-template")));
        $this->assertEquals("libreoffice-presentation.svg", $obj->getIcon($document->setMimeType("libreoffice/presentation")));
        $this->assertEquals("libreoffice-presentation-template.svg", $obj->getIcon($document->setMimeType("libreoffice/presentation-template")));
        $this->assertEquals("libreoffice-spreadsheet.svg", $obj->getIcon($document->setMimeType("libreoffice/spreadsheet")));
        $this->assertEquals("libreoffice-spreadsheet-template.svg", $obj->getIcon($document->setMimeType("libreoffice/spreadsheet-template")));
        $this->assertEquals("libreoffice-text.svg", $obj->getIcon($document->setMimeType("libreoffice/text")));
        $this->assertEquals("libreoffice-text-template.svg", $obj->getIcon($document->setMimeType("libreoffice/text-template")));
        $this->assertEquals("message-news.svg", $obj->getIcon($document->setMimeType("message/news")));
        $this->assertEquals("message-partial.svg", $obj->getIcon($document->setMimeType("message/partial")));
        $this->assertEquals("message-rfc822.svg", $obj->getIcon($document->setMimeType("message/rfc822")));
        $this->assertEquals("message.svg", $obj->getIcon($document->setMimeType("message")));
        $this->assertEquals("message-x-gnu-rmail.svg", $obj->getIcon($document->setMimeType("message/x-gnu-rmail")));
        $this->assertEquals("none.svg", $obj->getIcon($document->setMimeType("none")));
        $this->assertEquals("odf.svg", $obj->getIcon($document->setMimeType("odf")));
        $this->assertEquals("package-x-generic.svg", $obj->getIcon($document->setMimeType("package/x-generic")));
        $this->assertEquals("podcast.svg", $obj->getIcon($document->setMimeType("podcast")));
        $this->assertEquals("text-calendar.svg", $obj->getIcon($document->setMimeType("text/calendar")));
        $this->assertEquals("text-csharp.svg", $obj->getIcon($document->setMimeType("text/csharp")));
        $this->assertEquals("text-css.svg", $obj->getIcon($document->setMimeType("text/css")));
        $this->assertEquals("text-css.svg", $obj->getIcon($document->setMimeType("text/css")));
        $this->assertEquals("text-csv.svg", $obj->getIcon($document->setMimeType("text/csv")));
        $this->assertEquals("text-directory.svg", $obj->getIcon($document->setMimeType("text/directory")));
        $this->assertEquals("text-dockerfile.svg", $obj->getIcon($document->setMimeType("text/dockerfile")));
        $this->assertEquals("text-enriched.svg", $obj->getIcon($document->setMimeType("text/enriched")));
        $this->assertEquals("text-html.svg", $obj->getIcon($document->setMimeType("text/html")));
        $this->assertEquals("text-markdown.svg", $obj->getIcon($document->setMimeType("text/markdown")));
        $this->assertEquals("text-mathml.svg", $obj->getIcon($document->setMimeType("text/mathml")));
        $this->assertEquals("text-plain.svg", $obj->getIcon($document->setMimeType("text/plain")));
        $this->assertEquals("text-rdf.svg", $obj->getIcon($document->setMimeType("text/rdf")));
        $this->assertEquals("text-rdf+xml.svg", $obj->getIcon($document->setMimeType("text/rdf+xml")));
        $this->assertEquals("text-rtf.svg", $obj->getIcon($document->setMimeType("text/rtf")));
        $this->assertEquals("text-rust.svg", $obj->getIcon($document->setMimeType("text/rust")));
        $this->assertEquals("text-sgml.svg", $obj->getIcon($document->setMimeType("text/sgml")));
        $this->assertEquals("text-troff.svg", $obj->getIcon($document->setMimeType("text/troff")));
        $this->assertEquals("text-vcalendar.svg", $obj->getIcon($document->setMimeType("text/vcalendar")));
        $this->assertEquals("text-vnd.abc.svg", $obj->getIcon($document->setMimeType("text/vnd.abc")));
        $this->assertEquals("text-vnd.abc.svg", $obj->getIcon($document->setMimeType("text/vnd.abc")));
        $this->assertEquals("text-vnd.trolltech.linguist.svg", $obj->getIcon($document->setMimeType("text/vnd.trolltech.linguist")));
        $this->assertEquals("text-vnd.wap.wml.svg", $obj->getIcon($document->setMimeType("text/vnd.wap.wml")));
        $this->assertEquals("text-vnd.wap.wml.svg", $obj->getIcon($document->setMimeType("text/vnd.wap.wml")));
        $this->assertEquals("text-wiki.svg", $obj->getIcon($document->setMimeType("text/wiki")));
        $this->assertEquals("text-x-adasrc.svg", $obj->getIcon($document->setMimeType("text/x-adasrc")));
        $this->assertEquals("text-x-apport.svg", $obj->getIcon($document->setMimeType("text/x-apport")));
        $this->assertEquals("text-x-authors.svg", $obj->getIcon($document->setMimeType("text/x-authors")));
        $this->assertEquals("text-x-bibtex.svg", $obj->getIcon($document->setMimeType("text/x-bibtex")));
        $this->assertEquals("text-x-changelog.svg", $obj->getIcon($document->setMimeType("text/x-changelog")));
        $this->assertEquals("text-x-c++hdr.svg", $obj->getIcon($document->setMimeType("text/x-c++hdr")));
        $this->assertEquals("text-x-chdr.svg", $obj->getIcon($document->setMimeType("text/x-chdr")));
        $this->assertEquals("text-x-cmake.svg", $obj->getIcon($document->setMimeType("text/x-cmake")));
        $this->assertEquals("text-x-copying.svg", $obj->getIcon($document->setMimeType("text/x-copying")));
        $this->assertEquals("text-x-credits.svg", $obj->getIcon($document->setMimeType("text/x-credits")));
        $this->assertEquals("text-x-csharp.svg", $obj->getIcon($document->setMimeType("text/x-csharp")));
        $this->assertEquals("text-x-c++src.svg", $obj->getIcon($document->setMimeType("text/x-c++src")));
        $this->assertEquals("text-x-csrc.svg", $obj->getIcon($document->setMimeType("text/x-csrc")));
        $this->assertEquals("text-x-dtd.svg", $obj->getIcon($document->setMimeType("text/x-dtd")));
        $this->assertEquals("text-x-generic.svapplication-x-awk.svg", $obj->getIcon($document->setMimeType("text/x-generic.svapplication-x-awk")));
        $this->assertEquals("text-x-generic.svg", $obj->getIcon($document->setMimeType("text/x-generic")));
        $this->assertEquals("text-x-gettext-translation.svg", $obj->getIcon($document->setMimeType("text/x-gettext-translation")));
        $this->assertEquals("text-x-go.svg", $obj->getIcon($document->setMimeType("text/x-go")));
        $this->assertEquals("text-x-haskell.svg", $obj->getIcon($document->setMimeType("text/x-haskell")));
        $this->assertEquals("text-x-hex.svg", $obj->getIcon($document->setMimeType("text/x-hex")));
        $this->assertEquals("text-x-install.svg", $obj->getIcon($document->setMimeType("text/x-install")));
        $this->assertEquals("text-x-javascript.svg", $obj->getIcon($document->setMimeType("text/x-javascript")));
        $this->assertEquals("text-x-java-source.svg", $obj->getIcon($document->setMimeType("text/x-java-source")));
        $this->assertEquals("text-x-java.svg", $obj->getIcon($document->setMimeType("text/x-java")));
        $this->assertEquals("text-x-katefilelist.svg", $obj->getIcon($document->setMimeType("text/x-katefilelist")));
        $this->assertEquals("text-x-ldif.svg", $obj->getIcon($document->setMimeType("text/x-ldif")));
        $this->assertEquals("text-x-lilypond.svg", $obj->getIcon($document->setMimeType("text/x-lilypond")));
        $this->assertEquals("text-x-log.svg", $obj->getIcon($document->setMimeType("text/x-log")));
        $this->assertEquals("text-x-lua.svg", $obj->getIcon($document->setMimeType("text/x-lua")));
        $this->assertEquals("text-x-makefile.svg", $obj->getIcon($document->setMimeType("text/x-makefile")));
        $this->assertEquals("text-x-markdown.svg", $obj->getIcon($document->setMimeType("text/x-markdown")));
        $this->assertEquals("text-xmcd.svg", $obj->getIcon($document->setMimeType("text/xmcd")));
        $this->assertEquals("text-xml.svg", $obj->getIcon($document->setMimeType("text/xml")));
        $this->assertEquals("text-xml.svg", $obj->getIcon($document->setMimeType("text/xml")));
        $this->assertEquals("text-x-nfo.svg", $obj->getIcon($document->setMimeType("text/x-nfo")));
        $this->assertEquals("text-x-objchdr.svg", $obj->getIcon($document->setMimeType("text/x-objchdr")));
        $this->assertEquals("text-x-objcsrc.svg", $obj->getIcon($document->setMimeType("text/x-objcsrc")));
        $this->assertEquals("text-x-opml.svg", $obj->getIcon($document->setMimeType("text/x-opml")));
        $this->assertEquals("text-x-opml+xml.svg", $obj->getIcon($document->setMimeType("text/x-opml+xml")));
        $this->assertEquals("text-x-pascal.svg", $obj->getIcon($document->setMimeType("text/x-pascal")));
        $this->assertEquals("text-x-pascal.svg", $obj->getIcon($document->setMimeType("text/x-pascal")));
        $this->assertEquals("text-x-patch.svg", $obj->getIcon($document->setMimeType("text/x-patch")));
        $this->assertEquals("text-x-plain.svg", $obj->getIcon($document->setMimeType("text/x-plain")));
        $this->assertEquals("text-x-po.svg", $obj->getIcon($document->setMimeType("text/x-po")));
        $this->assertEquals("text-x-python.svg", $obj->getIcon($document->setMimeType("text/x-python")));
        $this->assertEquals("text-x-qml.svg", $obj->getIcon($document->setMimeType("text/x-qml")));
        $this->assertEquals("text-x-readme.svg", $obj->getIcon($document->setMimeType("text/x-readme")));
        $this->assertEquals("text-x-rpm-spec.svg", $obj->getIcon($document->setMimeType("text/x-rpm-spec")));
        $this->assertEquals("text-x-r.svg", $obj->getIcon($document->setMimeType("text/x-r")));
        $this->assertEquals("text-x-rust.svg", $obj->getIcon($document->setMimeType("text/x-rust")));
        $this->assertEquals("text-x-sass.svg", $obj->getIcon($document->setMimeType("text/x-sass")));
        $this->assertEquals("text-x-scala.svg", $obj->getIcon($document->setMimeType("text/x-scala")));
        $this->assertEquals("text-x-script.svg", $obj->getIcon($document->setMimeType("text/x-script")));
        $this->assertEquals("text-x-script.svg", $obj->getIcon($document->setMimeType("text/x-script")));
        $this->assertEquals("text-x-scss.svg", $obj->getIcon($document->setMimeType("text/x-scss")));
        $this->assertEquals("text-x-sql.svg", $obj->getIcon($document->setMimeType("text/x-sql")));
        $this->assertEquals("text-x-tcl.svg", $obj->getIcon($document->setMimeType("text/x-tcl")));
        $this->assertEquals("text-x-texinfo.svg", $obj->getIcon($document->setMimeType("text/x-texinfo")));
        $this->assertEquals("text-x-tex.svg", $obj->getIcon($document->setMimeType("text/x-tex")));
        $this->assertEquals("text-x-vcard.svg", $obj->getIcon($document->setMimeType("text/x-vcard")));
        $this->assertEquals("text-x-xslfo.svg", $obj->getIcon($document->setMimeType("text/x-xslfo")));
        $this->assertEquals("uri-mms.svg", $obj->getIcon($document->setMimeType("uri/mms")));
        $this->assertEquals("uri-mmst.svg", $obj->getIcon($document->setMimeType("uri/mmst")));
        $this->assertEquals("uri-pnm.svg", $obj->getIcon($document->setMimeType("uri/pnm")));
        $this->assertEquals("uri-rtspt.svg", $obj->getIcon($document->setMimeType("uri/rtspt")));
        $this->assertEquals("uri-rtspu.svg", $obj->getIcon($document->setMimeType("uri/rtspu")));
        $this->assertEquals("video-mlt-playlist.svg", $obj->getIcon($document->setMimeType("video/mlt-playlist")));
        $this->assertEquals("video-mp2t.svg", $obj->getIcon($document->setMimeType("video/mp2t")));
        $this->assertEquals("video-mp4.svg", $obj->getIcon($document->setMimeType("video/mp4")));
        $this->assertEquals("video-vivo.svg", $obj->getIcon($document->setMimeType("video/vivo")));
        $this->assertEquals("video-vnd.rn-realvideo.svg", $obj->getIcon($document->setMimeType("video/vnd.rn-realvideo")));
        $this->assertEquals("video-wavelet.svg", $obj->getIcon($document->setMimeType("video/wavelet")));
        $this->assertEquals("video-webm.svg", $obj->getIcon($document->setMimeType("video/webm")));
        $this->assertEquals("video-x-anim.svg", $obj->getIcon($document->setMimeType("video/x-anim")));
        $this->assertEquals("video-x-flic.svg", $obj->getIcon($document->setMimeType("video/x-flic")));
        $this->assertEquals("video-x-flv.svg", $obj->getIcon($document->setMimeType("video/x-flv")));
        $this->assertEquals("video-x-generic.svg", $obj->getIcon($document->setMimeType("video/x-generic")));
        $this->assertEquals("video-x-google-vlc-plugin.svg", $obj->getIcon($document->setMimeType("video/x-google-vlc-plugin")));
        $this->assertEquals("video-x-javafx.svg", $obj->getIcon($document->setMimeType("video/x-javafx")));
        $this->assertEquals("video-x-matroska.svg", $obj->getIcon($document->setMimeType("video/x-matroska")));
        $this->assertEquals("video-x-mng.svg", $obj->getIcon($document->setMimeType("video/x-mng")));
        $this->assertEquals("video-x-msvideo.svg", $obj->getIcon($document->setMimeType("video/x-msvideo")));
        $this->assertEquals("video-x-msvideo.svg", $obj->getIcon($document->setMimeType("video/x-msvideo")));
        $this->assertEquals("video-x-ms-wmp.svg", $obj->getIcon($document->setMimeType("video/x-ms-wmp")));
        $this->assertEquals("video-x-ms-wmv.svg", $obj->getIcon($document->setMimeType("video/x-ms-wmv")));
        $this->assertEquals("video-x-ogm+ogg.svg", $obj->getIcon($document->setMimeType("video/x-ogm+ogg")));
        $this->assertEquals("video-x-theora+ogg.svg", $obj->getIcon($document->setMimeType("video/x-theora+ogg")));
        $this->assertEquals("video-x-wmv.svg", $obj->getIcon($document->setMimeType("video/x-wmv")));
        $this->assertEquals("viewbib.svg", $obj->getIcon($document->setMimeType("viewbib")));
        $this->assertEquals("viewdvi.svg", $obj->getIcon($document->setMimeType("viewdvi")));
        $this->assertEquals("viewhtml.svg", $obj->getIcon($document->setMimeType("viewhtml")));
        $this->assertEquals("viewpdf.svg", $obj->getIcon($document->setMimeType("viewpdf")));
        $this->assertEquals("viewps.svg", $obj->getIcon($document->setMimeType("viewps")));
        $this->assertEquals("virtualbox-hdd.svg", $obj->getIcon($document->setMimeType("virtualbox/hdd")));
        $this->assertEquals("virtualbox-ova.svg", $obj->getIcon($document->setMimeType("virtualbox/ova")));
        $this->assertEquals("virtualbox-ovf.svg", $obj->getIcon($document->setMimeType("virtualbox/ovf")));
        $this->assertEquals("virtualbox-vbox-extpack.svg", $obj->getIcon($document->setMimeType("virtualbox/vbox-extpack")));
        $this->assertEquals("virtualbox-vbox.svg", $obj->getIcon($document->setMimeType("virtualbox/vbox")));
        $this->assertEquals("virtualbox-vdi.svg", $obj->getIcon($document->setMimeType("virtualbox/vdi")));
        $this->assertEquals("virtualbox-vhd.svg", $obj->getIcon($document->setMimeType("virtualbox/vhd")));
        $this->assertEquals("virtualbox-vmdk.svg", $obj->getIcon($document->setMimeType("virtualbox/vmdk")));
        $this->assertEquals("vnd.ms-publisher.svg", $obj->getIcon($document->setMimeType("vnd.ms-publisher")));
        $this->assertEquals("x-kde-nsplugin-generated.svg", $obj->getIcon($document->setMimeType("x-kde/nsplugin-generated")));
        $this->assertEquals("x-mail-distribution-list.svg", $obj->getIcon($document->setMimeType("x-mail/distribution-list")));
        $this->assertEquals("x-media-podcast.svg", $obj->getIcon($document->setMimeType("x-media-podcast")));
        $this->assertEquals("x-office-address-book.svg", $obj->getIcon($document->setMimeType("x-office-address-book")));
        $this->assertEquals("x-office-calendar.svg", $obj->getIcon($document->setMimeType("x-office/calendar")));
        $this->assertEquals("x-office-contact.svg", $obj->getIcon($document->setMimeType("x-office/contact")));
        $this->assertEquals("x-office-document.svg", $obj->getIcon($document->setMimeType("x-office/document")));
        $this->assertEquals("x-office-drawing.svg", $obj->getIcon($document->setMimeType("x-office/drawing")));
        $this->assertEquals("x-office-presentation.svg", $obj->getIcon($document->setMimeType("x-office/presentation")));
        $this->assertEquals("x-office-spreadsheet.svg", $obj->getIcon($document->setMimeType("x-office/spreadsheet")));
    }

    /**
     * Test getIconAsset()
     *
     * @return void
     */
    public function testGetIconAsset(): void {

        // Set a Document mock.
        $document = new Document();
        $document->setType(DocumentInterface::TYPE_DIRECTORY);

        $obj = new DocumentIconProvider();

        $this->assertEquals("/bundles/wbwedm/img/folder.svg", $obj->getIconAsset($document));
    }

    /**
     * Test getIcon()
     *
     * @return void
     */
    public function testGetIconWithDefaultIcon(): void {

        // Set a Document mock.
        $document = new Document();
        $document->setType(DocumentInterface::TYPE_DOCUMENT);

        $obj = new DocumentIconProvider();

        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/acad")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/arj")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/binhex")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/binhex4")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/cdf")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/clariscad")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/commonground")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/drafting")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/dsptype")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/dxf")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/ecmascript")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/envoy")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/fractals")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/freeloader")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/futuresplash")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/gnutar")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/groupwise")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/hlp")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/hta")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/i-deas")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/inf")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/java")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/java-byte-code")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/lha")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/lzx")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/mac-binary")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/macbinary")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/mac-binhex")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/mac-compactpro")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/marc")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/mbedlet")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/mcad")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/mime")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/mswrite")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/netmc")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/oda")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/pkcs10")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/pkcs-12")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/pkcs-crl")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/plain")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/powerpoint")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/ringing-tones")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/sdp")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/sea")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/set")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/sla")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/solids")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/sounder")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/streamingmedia")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/toolbook")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/vda")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/vnd.fdf")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/vnd.hp-pcl")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/vnd.ms-pki.certstore")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/vnd.ms-pki.pko")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/vnd.ms-pki.seccat")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/vnd.ms-pki.stl")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/vnd.ms-project")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/vnd.nokia.configuration-message")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/vnd.nokia.ringing-tone")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/vnd.rn-realplayer")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/vnd.wap.wmlc")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/vnd.wap.wmlscriptc")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/vnd.xara")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/vocaltec-media-desc")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/vocaltec-media-file")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/wordperfect6.1")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-123")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-aim")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-authorware-bin")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-authorware-map")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-authorware-seg")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-bcpio")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-binary")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-binhex40")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-bytecode(compiled elisp)")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-bytecode.python")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-cdf")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-cdlink")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-cmu-raster")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-cocoa")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-compactpro")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-conference")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-cpt")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-csh")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-deepv")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-dvi")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-elc")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-esrehber")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-frame")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-freelance")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-gsp")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-gss")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-gtar")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-hdf")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-httpd-imap")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-ima")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-internett-signup")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-inventor")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-ip2")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-java-class")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-java-commerce")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-ksh")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-lisp")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-livescreen")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-lotus")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-lotusscreencam")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-lzh")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-mac-binhex40")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-magic-cap-package-1.0")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-mathcad")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-meme")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-mif")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-mix-transfer")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-mspowerpoint")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-navi-animation")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-navidoc")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-navimap")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-navistyle")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-newton-compatible-pkg")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-nokia-9000-communicator-add-on-software")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-omc")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-omcdatamaker")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-omcregerator")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-pcl")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-pixclscript")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-pkcs10")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-pkcs7-certreqresp")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-pkcs7-signature")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-pointplus")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-portable-anymap")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-qpro")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-rtf")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-sdp")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-sea")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-seelogo")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-sh")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-sit")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-stuffit")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-sv4cpio")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-sv4crc")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-tcl")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-tex")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-troff-me")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-troff-ms")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-troff-msvideo")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-ustar")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-vnd.audioexplosion.mzz")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-vnd.ls-xpix")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-vrml")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-winhelp")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-wintalk")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-wpwin")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-wri")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("application/x-zip-compressed")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/it")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/make.my.funk")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/mid")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/mod")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/mpeg3")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/s3m")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/tsp-audio")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/tsplayer")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/vnd.qcelp")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/voc")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/voxware")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/wav")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/x-au")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/x-jam")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/x-liveaudio")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/xm")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/x-mod")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/x-mpeg-3")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/x-mpequrl")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/x-psid")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/x-realaudio")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/x-twinvq")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/x-vnd.audioexplosion.mjuicemediafile")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("audio/x-voc")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("drawing/x-dwf (old)")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/fif")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/g3fax")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/jutvision")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/vasa")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/vnd.fpx")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/vnd.net-fpx")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/vnd.rn-realflash")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/vnd.rn-realpix")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/vnd.wap.wbmp")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/vnd.xiff")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/xbm")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/x-cmu-raster")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/x-jg")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/x-jps")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/x-pcx")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/x-pict")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/xpm")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/x-portable-anymap")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/x-portable-graymap")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/x-portable-greymap")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/x-portable-pixmap")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/x-rgb")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/x-windows-bmp")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/x-xbitmap")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/x-xbm")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/x-xwd")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("image/x-xwindowdump")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("i-world/i-vrml")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("model/vnd.dwf")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("model/x-pov")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("multipart/x-gzip")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("multipart/x-ustar")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("multipart/x-zip")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("music/x-karaoke")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("paleovu/x-pv")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/asp")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/ecmascript")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/javascript")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/mcf")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/pascal")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/scriplet")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/tab-separated-values")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/vnd.fmi.flexstor")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/vnd.rn-realtext")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/vnd.wap.wmlscript")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/webviewhtml")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/x-audiosoft-intra")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/x-component")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/x-la-asf")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/x-m")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/x-script.csh")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/x-script.elisp")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/x-script.guile")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/x-script.ksh")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/x-script.lisp")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/x-script.perl")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/x-script.perl-module")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/x-script.phyton")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/x-script.rexx")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/x-script.scheme")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/x-script.sh")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/x-script.tcl")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/x-script.tcsh")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/x-script.zsh")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/x-setext")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/x-uil")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("text/x-vcalendar")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("video/animaflex")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("video/avi")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("video/avs-video")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("video/dl")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("video/fli")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("video/gl")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("video/msvideo")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("video/vdo")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("video/vosaic")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("video/x-amt-demorun")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("video/x-amt-showrun")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("video/x-atomic3d-feature")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("video/x-dl")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("video/x-fli")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("video/x-gl")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("video/x-isvideo")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("video/x-motion-jpeg")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("video/x-mpeq2a")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("video/x-ms-asf-plugin")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("video/x-qtc")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("video/x-scm")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("windows/metafile")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("www/mime")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("x-conference/x-cooltalk")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("xgl/drawing")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("xgl/movie")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("x-world/x-svr")));
        $this->assertEquals(DocumentIconProvider::DEFAULT_ICON, $obj->getIcon($document->setMimeType("x-world/x-vrt")));
    }

    /**
     * Test getIcon()
     *
     * @return void
     */
    public function testGetIconWithDirectory(): void {

        // Set a Document mock.
        $document = new Document();
        $document->setType(DocumentInterface::TYPE_DIRECTORY);

        $obj = new DocumentIconProvider();

        $this->assertEquals("folder.svg", $obj->getIcon($document));
    }

    /**
     * Test __construct()
     *
     * @return void
     */
    public function test__construct(): void {

        $this->assertEquals("unknown.svg", DocumentIconProvider::DEFAULT_ICON);
        $this->assertEquals("wbw.edm.provider.document_icon", DocumentIconProvider::SERVICE_NAME);

        $obj = new DocumentIconProvider();

        $this->assertEquals(realpath(__DIR__ . "/../../src/Resources/public/img"), $obj->getDirectory());
    }
}
